/*
 * @inspiredby cfHxqA
 * @author     MrGreenscreen aka. TiBo
 *
 * @category   Mission Chief
 *
 * Skript zur automatischen Umbenennung von Fahrzeugen
 * Version: 1.2
 * 
 * Beschreibung:
 * Dieses Script benennt die Fahrzeuge nach den entsprechenden Vorgaben um.
 * 
 * @license    Attribution-NonCommercial-NoDerivs 4.0 Unported <http://creativecommons.org/licenses/by-nc-nd/4.0/>
 * Copyright © 2024
 * Alle Rechte vorbehalten.
 */
 
// EINSTELLUNGEN; Platzhalter: {Building}, {VehicleName}, {VehicleType}, {Index}
var NewCaption = '{Building} / {VehicleType}/{Index}';

// CSRF-Token aus dem Meta-Tag abrufen
const csrfTokenElement = document.querySelector('meta[name="csrf-token"]');
const csrfToken = csrfTokenElement ? csrfTokenElement.getAttribute('content') : null;
console.log('CSRF-Token:', csrfToken);

if (!csrfToken) {
  console.error('CSRF-Token fehlt. Skript wird nicht fortgesetzt.');
  throw new Error('CSRF-Token nicht gefunden.');
}

/**
 * Ruft die Fahrzeug-Liste asynchron ab und gibt diese zurück.
 * @return Array
 */
async function GetVehiclesAsync() {
  try {
    const response = await fetch('https://www.leitstellenspiel.de/api/vehicles', {
      method: 'GET',
      headers: {
        'Accept': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Fehler beim Abrufen der Fahrzeugdaten: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Fehler beim Abrufen der Fahrzeugliste:', error);
    return [];
  }
}

/**
 * Ruft die Gebäude-Liste asynchron ab und gibt diese zurück.
 * @return Array
 */
async function GetBuildingsAsync() {
  try {
    const response = await fetch('https://www.leitstellenspiel.de/api/buildings', {
      method: 'GET',
      headers: {
        'Accept': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Fehler beim Abrufen der Gebäudedaten: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Fehler beim Abrufen der Gebäudeliste:', error);
    return [];
  }
}

// Skript-Initialisierung
(async function() {
  console.log('Starte Umbenennung der Fahrzeuge...');

  // Gebäude- und Fahrzeug-Liste abrufen
  const buildingList = await GetBuildingsAsync();
  const vehicleList = await GetVehiclesAsync();

  if (!buildingList.length || !vehicleList.length) {
    console.error('Keine Gebäude oder Fahrzeuge gefunden. Skript wird beendet.');
    return;
  }

  console.log(`Anzahl der gefundenen Fahrzeuge: ${vehicleList.length}`);

  // Zuordnung von Gebäude-IDs zu ihren Namen
  const buildingNames = {};
  buildingList.forEach(building => {
    buildingNames[building.id] = building.caption;
  });

  // Initialisiere Zähler für Fahrzeugtypen pro Wache
  const vehicleTypeCount = {};

  for (const vehicle of vehicleList) {
    const buildingName = buildingNames[vehicle.building_id] || 'Unbekanntes Gebäude';
    const vehicleType = vehicle.vehicle_type_caption || 'Unbekannt';

    // Initialisiere Zähler für den aktuellen Fahrzeugtyp und die Wache, falls nicht vorhanden
    if (!vehicleTypeCount[vehicle.building_id]) {
      vehicleTypeCount[vehicle.building_id] = {};
    }
    if (!vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type]) {
      vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type] = 1;
    } else {
      vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type]++;
    }

    // Formatierter Index für den Fahrzeugtyp innerhalb der Wache
    const formattedIndex = vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type] < 10
      ? `0${vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type]}`
      : vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type];

    // Neuen Fahrzeugnamen erstellen
    const NewCaptionScheme = NewCaption
      .replace('{Building}', buildingName)
      .replace('{VehicleType}', vehicleType)
      .replace('{Index}', formattedIndex);

    // Ausgabe für Debugging - Zeigt das Fahrzeug und die geplante Umbenennung an
    console.log(`Fahrzeug ID ${vehicle.id}: Alter Name - ${vehicle.caption}, Neuer Name - ${NewCaptionScheme}`);

    if (vehicle.caption === NewCaptionScheme) {
      console.log(`Fahrzeug ID ${vehicle.id} wird übersprungen - Name entspricht bereits dem neuen Schema.`);
      continue;
    }

    try {
      // Formulardaten vorbereiten
      const formData = new FormData();
      formData.append('_method', 'put');
      formData.append('authenticity_token', csrfToken);
      formData.append('vehicle[caption]', NewCaptionScheme);

      // Anfrage senden
      const response = await fetch(`https://www.leitstellenspiel.de/vehicles/${vehicle.id}`, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        console.log(`Fahrzeug ID ${vehicle.id} erfolgreich umbenannt.`);
      } else {
        const responseText = await response.text();
        console.error(`Fehler beim Umbenennen der Fahrzeug ID ${vehicle.id}:`, responseText);
      }

      // Pause zwischen Aktionen
      await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 200) + 100));
    } catch (error) {
      console.error(`Fehler beim Umbenennen der Fahrzeug ID ${vehicle.id}:`, error);
    }
  }

  console.log('Umbenennung der Fahrzeuge abgeschlossen!');
})();
