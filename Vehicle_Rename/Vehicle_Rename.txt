/*
 * @author     cfHxqA
 * @modified   MrGreenscreen aka. TiBo
 *
 * @category   Mission Chief
 *
 * Skript zur automatischen Umbenennung von Wachen
 * Version: 1.1
 * 
 * Beschreibung:
 * Dieses Skript ruft eine Liste von Gebäuden ab, filtert nur relevante Wachen heraus und
 * benennt sie basierend auf Standort und Landkreis-Kürzel automatisch um. Es nutzt dabei
 * die OpenStreetMap-Geocoding API, um die Koordinaten in Standortinformationen umzuwandeln.
 * 
 * @license    Attribution-NonCommercial-NoDerivs 4.0 Unported <http://creativecommons.org/licenses/by-nc-nd/4.0/>
 * Copyright © 2024
 * Alle Rechte vorbehalten.
 */
 
 
 // EINSTELLUNGEN; Platzhalter: {Building}, {VehicleName}, {VehicleType}, {Index}
var NewCaption = '{Building} / {VehicleType}/{Index}';

// CSRF-Token aus dem Meta-Tag abrufen
const csrfTokenElement = document.querySelector('meta[name="csrf-token"]');
const csrfToken = csrfTokenElement ? csrfTokenElement.getAttribute('content') : null;
console.log('CSRF-Token:', csrfToken);

/**
 * Ruft die Fahrzeug-Liste asynchron ab und gibt diese zurück.
 * @return Array
 */
async function GetVehiclesAsync() {
  const response = await fetch('https://www.leitstellenspiel.de/api/vehicles', {
    method: 'GET',
    headers: {
      'Accept': 'application/json'
    }
  });
  return response.json();
}

/**
 * Ruft die Fahrzeugtypen-Namen asynchron ab und gibt sie als Liste zurück.
 * @return Array
 */
async function GetVehicleNameListAsync(Index = 0, Entities = []) {
  const vehicleName = await GetVehicleNameByIdAsync(Index);
  if (typeof vehicleName === 'undefined') return Entities;
  
  Entities.push({ id: Index, name: vehicleName });
  return await GetVehicleNameListAsync(Index + 1, Entities);
}

/**
 * Ruft die Gebäude-Liste asynchron ab und gibt diese zurück.
 * @return Array
 */
async function GetBuildingsAsync() {
  const response = await fetch('https://www.leitstellenspiel.de/api/buildings', {
    method: 'GET',
    headers: {
      'Accept': 'application/json'
    }
  });
  return response.json();
}

// Skript-Initialisierung
(async function() {
  console.log('Starte Umbenennung der Fahrzeuge...');

  // Gebäude- und Fahrzeug-Liste abrufen
  const buildingList = await GetBuildingsAsync();
  let vehicleList = await GetVehiclesAsync();
  const vehicleNameList = await GetVehicleNameListAsync();

  console.log(`Gesamtanzahl der gefundenen Fahrzeuge: ${vehicleList.length}`);

  // Zuordnung von Gebäude-IDs zu ihren Namen
  const buildingNames = {};
  buildingList.forEach(building => {
    buildingNames[building.id] = building.caption;
  });

  // Initialisiere Zähler für Fahrzeugtypen pro Wache
  const vehicleTypeCount = {};

  for (const vehicle of vehicleList) {
    const buildingName = buildingNames[vehicle.building_id] || "Unbekanntes Gebäude";
    const vehicleType = vehicleNameList.find(vType => vType.id == vehicle.vehicle_type)?.name || "Unbekannt";

    // Initialisiere Zähler für den aktuellen Fahrzeugtyp und die Wache, falls nicht vorhanden
    if (!vehicleTypeCount[vehicle.building_id]) {
      vehicleTypeCount[vehicle.building_id] = {};
    }
    if (!vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type]) {
      vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type] = 1;
    } else {
      vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type]++;
    }

    // Formatierter Index für den Fahrzeugtyp innerhalb der Wache
    const formattedIndex = vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type] < 10
      ? `0${vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type]}`
      : vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type];

    // Neuen Fahrzeugnamen erstellen
    var NewCaptionScheme = NewCaption.replace('{Building}', buildingName).replace('{VehicleType}', vehicleType).replace('{Index}', formattedIndex);

    // Ausgabe für Debugging - Zeigt das Fahrzeug und die geplante Umbenennung an
    console.log(`Fahrzeug ID ${vehicle.id}: Alter Name - ${vehicle.caption}, Geplanter neuer Name - ${NewCaptionScheme}`);

    if (vehicle.caption === NewCaptionScheme) {
      console.log(`Überspringe Fahrzeug ID ${vehicle.id} - Name entspricht bereits dem neuen Schema.`);
      continue;
    }

    console.log(`Umbenennung wird versucht. Alter Name: ${vehicle.caption} / Neuer Name: ${NewCaptionScheme}`);

    try {
      // Formulardaten vorbereiten
      var formData = new FormData();
      formData.append('utf8', '✓');
      formData.append('_method', 'put');
      if (csrfToken) formData.append('authenticity_token', csrfToken); // Nur hinzufügen, wenn Token vorhanden
      formData.append('vehicle[caption]', NewCaptionScheme);

      // Anfrage mit form-data senden
      const response = await fetch(`https://www.leitstellenspiel.de/vehicles/${vehicle.id}`, {
        method: 'POST',
        body: formData,
      });

      const responseText = await response.text();
      //console.log(`Antwort des Servers für Fahrzeug ID ${vehicle.id}:`, responseText);

      if (response.ok) {
        console.log(`Fahrzeug ID ${vehicle.id} erfolgreich aktualisiert.`);
      } else {
        console.error(`Fehler beim Aktualisieren der Fahrzeug ID: ${vehicle.id} - Antwort:`, responseText);
      }

      // Pause zwischen Aktionen
      await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 200) + 100));
    } catch (error) {
      console.error(`Fehler beim Aktualisieren der Fahrzeug ID: ${vehicle.id}`, error);
    }
  }

  console.log('Umbenennung der Fahrzeuge abgeschlossen!');
})();
