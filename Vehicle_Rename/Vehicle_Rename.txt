/*
 * @inspiredby cfHxqA
 * @author     MrGreenscreen aka. TiBo
 *
 * @category   Mission Chief
 *
 * Skript zur automatischen Umbenennung von Fahrzeugen
 * Version: 1.3
 * 
 * Beschreibung:
 * Dieses Script benennt die Fahrzeuge nach den entsprechenden Vorgaben um.
 * 
 * @license    Attribution-NonCommercial-NoDerivs 4.0 Unported <http://creativecommons.org/licenses/by-nc-nd/4.0/>
 * Copyright © 2024
 * Alle Rechte vorbehalten.
 */
 
// EINSTELLUNGEN
  // Platzhalter: {Building}, {VehicleName}, {VehicleType}, {Index}
  var NewCaption = '{Building} / {VehicleType}/{Index}';

  // Hinzufügen von Zahlen nur, wenn mehr als ein Fahrzeug desselben Typs vorhanden ist
  var AddNumbersOnlyIfMultiple = false;

// Mapping von vehicle_type-ID zu Klartextnamen
const vehicleTypeMapping = {
  0: 'LF',
  1: 'LF 10',
  2: 'DLK 23',
  3: 'ELW 1',
  4: 'RW',
  5: 'GW-A',
  6: 'LF 8/6',
  7: 'LF 20/16',
  8: 'LF 10/6',
  9: 'LF 16-TS',
  10: 'GW-Öl',
  11: 'GW-L2-Wasser',
  12: 'GW-Messtechnik',
  13: 'SW 10',
  14: 'SW 20',
  15: 'SW 2000-Tr',
  16: 'SW Kats',
  17: 'TLF 2000',
  18: 'TLF 3000',
  19: 'TLF 8/8',
  20: 'TLF 8/18',
  21: 'TLF 16/24-Tr',
  22: 'TLF 16/25',
  23: 'TLF 16/45',
  24: 'TLF 20/40',
  25: 'TLF 20/40-SL',
  26: 'TLF 16',
  27: 'GW-Gefahrgut',
  28: 'RTW',
  29: 'NEF',
  30: 'HLF 20',
  31: 'RTH',
  32: 'FuStW',
  33: 'GW-Höhenrettung',
  34: 'ELW 2',
  35: 'leBefKw',
  36: 'MTW',
  37: 'TSF-W',
  38: 'KTW',
  39: 'GKW',
  40: 'MTW-TZ',
  41: 'MzGW (FGr N)',
  42: 'LKW K 9',
  43: 'BRmG R',
  44: 'Anh DLE',
  45: 'MLW 5',
  46: 'WLF',
  47: 'AB-Rüst',
  48: 'AB-Atemschutz',
  49: 'AB-Öl',
  50: 'GruKw',
  51: 'FüKw',
  52: 'GefKw',
  53: 'Dekon-P',
  54: 'AB-Dekon-P',
  55: 'KdoW-LNA',
  56: 'KdoW-OrgL',
  57: 'FwK',
  58: 'KTW Typ B',
  59: 'ELW (SEG)',
  60: 'GW-San',
  61: 'Polizeihubschrauber',
  62: 'AB-Schlauch',
  63: 'GW-Taucher',
  64: 'GW-Wasserrettung',
  65: 'LKW Lkr 1tm',
  66: 'Anh MzB',
  67: 'Anh SchlB',
  68: 'Anh MzAB',
  69: 'Tauchkraftwagen',
  70: 'MZB',
  71: 'AB-MZB',
  72: 'WaWe10',
  73: 'GRTW',
  74: 'NAW',
  75: 'FLF',
  76: 'Rettungstreppe',
  77: 'AB-Gefahrgut',
  78: 'AB-Einsatzleitung',
  79: 'SEK - ZF',
  80: 'SEK - MTF',
  81: 'MEK - ZF',
  82: 'MEK - MTF',
  83: 'GW-Werkfeuerwehr',
  84: 'ULF mit Löscharm',
  85: 'TM 50',
  86: 'Turbolöscher',
  87: 'TLF 4000',
  88: 'KLF',
  89: 'MLF',
  90: 'HLF 10',
  91: 'Rettungshundefahrzeug',
  92: 'AnhHund',
  93: 'MTW-O',
  94: 'DHuFüKw',
  95: 'Polizeimotorrad',
  96: 'Außenlastbehälter (allgemein)',
  97: 'ITW',
  98: 'Zivilstreifenwagen',
  100: 'MLW 4',
  101: 'Anh SwPu',
  102: 'Anh 7',
  103: 'FuStW (DGL)',
  104: 'GW-L1',
  105: 'GW-L2',
  106: 'MTF-L',
  107: 'LF-L',
  108: 'AB-L',
  109: 'MzGW SB',
  110: 'NEA50 (THW)',
  111: 'NEA50 (Feuerwehr)',
  112: 'NEA200 (THW)',
  113: 'NEA200 (Feuerwehr)',
  114: 'GW-Lüfter',
  115: 'Anh Lüfter',
  116: 'AB-Lüfter',
  117: 'AB-Tank',
  118: 'Kleintankwagen',
  119: 'AB-Lösch',
  120: 'Tankwagen',
  121: 'GTLF',
  122: 'LKW Lbw (FGr E)',
  123: 'LKW Lbw (FGr WP)',
  124: 'MTW-OV',
  125: 'MTW-Tr UL',
  126: 'MTF Drohne (Feuerwehr)',
  127: 'GW AUS (SEG)',
  128: 'ELW Drohne (Feuerwehr)',
  129: 'ELW2 Drohne (Feuerwehr)',
  130: 'GW-Bt',
  131: 'FKH',
  132: 'BT-Kombi',
  133: 'Bt LKW',
  134: 'Pferdetransporter klein',
  135: 'Pferdetransporter groß',
  136: 'Anh Pferdetransport',
  137: 'Zugfahrzeug Pferdetransport',
  138: 'GW-Verpflegung',
  139: 'GW-Küche',
  140: 'MTW-Verpflegung',
  141: 'FKH',
  142: 'AB-Küche',
  143: 'Anh Schlauch',
  144: 'FüKW (THW)',
  145: 'FüKomKW',
  146: 'Anh FüLa',
  147: 'FmKW',
  148: 'MTW-FGr K',
  149: 'GW-Bergrettung (NEF)',
  150: 'GW-Bergrettung',
  151: 'ELW Bergrettung',
  152: 'ATV',
  153: 'Hundestaffel (Bergrettung)',
  154: 'Schneefahrzeug',
  155: 'Anh Höhenrettung (Bergrettung)',
  156: 'Polizeihubschrauber mit verbauter Winde',
  157: 'RTH Winde',
  158: 'GW-Höhenrettung (Bergrettung)',
  159: 'Seenotrettungskreuzer',
  160: 'Seenotrettungsboot',
  161: 'Hubschrauber (Seenotrettung)',
  162: 'RW-Schiene',
  163: 'HLF Schiene',
  164: 'AB-Schiene',
  165: 'LauKw'
};

// Funktion zur Umwandlung der vehicle_type-ID in den Klartextnamen
function getVehicleTypeCaption(vehicleTypeId) {
  return vehicleTypeMapping[vehicleTypeId] || 'Unbekannt';
}

// CSRF-Token aus dem Meta-Tag abrufen
const csrfTokenElement = document.querySelector('meta[name="csrf-token"]');
const csrfToken = csrfTokenElement ? csrfTokenElement.getAttribute('content') : null;
console.log('CSRF-Token:', csrfToken);

if (!csrfToken) {
  console.error('CSRF-Token fehlt. Skript wird nicht fortgesetzt.');
  throw new Error('CSRF-Token nicht gefunden.');
}

/**
 * Ruft die Fahrzeug-Liste asynchron ab und gibt diese zurück.
 * @return Array
 */
async function GetVehiclesAsync() {
  try {
    const response = await fetch('https://www.leitstellenspiel.de/api/vehicles', {
      method: 'GET',
      headers: {
        'Accept': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Fehler beim Abrufen der Fahrzeugdaten: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Fehler beim Abrufen der Fahrzeugliste:', error);
    return [];
  }
}

/**
 * Ruft die Gebäude-Liste asynchron ab und gibt diese zurück.
 * @return Array
 */
async function GetBuildingsAsync() {
  try {
    const response = await fetch('https://www.leitstellenspiel.de/api/buildings', {
      method: 'GET',
      headers: {
        'Accept': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Fehler beim Abrufen der Gebäudedaten: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Fehler beim Abrufen der Gebäudeliste:', error);
    return [];
  }
}

// Skript-Initialisierung
(async function() {
  console.log('Starte Umbenennung der Fahrzeuge...');

  // Gebäude- und Fahrzeug-Liste abrufen
  const buildingList = await GetBuildingsAsync();
  const vehicleList = await GetVehiclesAsync();

  if (!buildingList.length || !vehicleList.length) {
    console.error('Keine Gebäude oder Fahrzeuge gefunden. Skript wird beendet.');
    return;
  }

  console.log(`Anzahl der gefundenen Fahrzeuge: ${vehicleList.length}`);

  // Zuordnung von Gebäude-IDs zu ihren Namen
  const buildingNames = {};
  buildingList.forEach(building => {
    buildingNames[building.id] = building.caption;
  });

  // Initialisiere Zähler für Fahrzeugtypen pro Wache
  const vehicleTypeCount = {};

  for (const vehicle of vehicleList) {
    const buildingName = buildingNames[vehicle.building_id] || 'Unbekanntes Gebäude';
    const vehicleType = getVehicleTypeCaption(vehicle.vehicle_type);

    // Initialisiere Zähler für den aktuellen Fahrzeugtyp und die Wache, falls nicht vorhanden
    if (!vehicleTypeCount[vehicle.building_id]) {
      vehicleTypeCount[vehicle.building_id] = {};
    }
    if (!vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type]) {
      vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type] = 1;
    } else {
      vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type]++;
    }

    // Bedingung für das Hinzufügen von Zahlen prüfen
    const count = vehicleTypeCount[vehicle.building_id][vehicle.vehicle_type];
    const formattedIndex = AddNumbersOnlyIfMultiple && count === 1 ? '' : count < 10 ? `0${count}` : count;

    // Neuen Fahrzeugnamen erstellen
    const NewCaptionScheme = NewCaption
      .replace('{Building}', buildingName)
      .replace('{VehicleType}', vehicleType)
      .replace('{Index}', formattedIndex);

    // Ausgabe für Debugging - Zeigt das Fahrzeug und die geplante Umbenennung an
    console.log(`Fahrzeug ID ${vehicle.id}: Alter Name - ${vehicle.caption}, Neuer Name - ${NewCaptionScheme}`);

    if (vehicle.caption === NewCaptionScheme) {
      console.log(`Fahrzeug ID ${vehicle.id} wird übersprungen - Name entspricht bereits dem neuen Schema.`);
      continue;
    }

    try {
      // Formulardaten vorbereiten
      const formData = new FormData();
      formData.append('_method', 'put');
      formData.append('authenticity_token', csrfToken);
      formData.append('vehicle[caption]', NewCaptionScheme);

      // Anfrage senden
      const response = await fetch(`https://www.leitstellenspiel.de/vehicles/${vehicle.id}`, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        console.log(`Fahrzeug ID ${vehicle.id} erfolgreich umbenannt.`);
      } else {
        const responseText = await response.text();
        console.error(`Fehler beim Umbenennen der Fahrzeug ID ${vehicle.id}:`, responseText);
      }

      // Pause zwischen Aktionen
      await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 200) + 100));
    } catch (error) {
      console.error(`Fehler beim Umbenennen der Fahrzeug ID ${vehicle.id}:`, error);
    }
  }

  console.log('Umbenennung der Fahrzeuge abgeschlossen!');
})();
