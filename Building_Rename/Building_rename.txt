/*
 * @author     MrGreenscreen aka. TiBo
 * @credits    The Watcher - Watch at me!
 * @category   Mission Chief
 *
 * Skript zur automatischen Umbenennung von Wachen
 * Version: 1.2
 * 
 * Beschreibung:
 * Dieses Skript ruft eine Liste von Gebäuden ab, filtert nur relevante Wachen heraus und
 * benennt sie basierend auf Standort und Landkreis-Kürzel automatisch um. Es nutzt dabei
 * die OpenStreetMap-Geocoding API, um die Koordinaten in Standortinformationen umzuwandeln.
 * 
 * @license    Attribution-NonCommercial-NoDerivs 4.0 Unported <http://creativecommons.org/licenses/by-nc-nd/4.0/>
 * Copyright © 2024
 * Alle Rechte vorbehalten.
 */

// EINSTELLUNGEN; Platzhalter: {DistrictAbbreviation}, {BOS}, {Location}
var NewBuildingCaption = '{DistrictAbbreviation} / {BOS} / {Location}';
var FilterBuildingType = [0, 2, 6, 9, 18, 19, 20]; // Nur Wachen-Typen: Feuerwehr, Rettungswache, Polizeiwache, THW usw.

// Zuordnungstabelle für Landkreise und kreisfreie Städte in Bayern und Baden-Württemberg
let districtAbbreviations = {};
let stadt_zuordnung = {};

/**
 * Laden der Landkreiszuordnung von Extern
**/

async function LoadDistrictAbbreviations() {
  try {
    const response = await fetch ('https://raw.githubusercontent.com/MrGreenscreenWFW/LSS-Scripte/refs/heads/main/Building_Rename/landkreis_zuordnung.json');
    if (!response.ok) {
        throw new Error(`Fehler beim Laden der Zuordnungen(LK und KFS): ${response.statusText}`);
    }
    districtAbbreviations = await response.json();
    console.log('Landkreis-Zuordnung erfolgreich geladen.');
  } catch (error) {
    console.error('Fehler beim Laden der Zuordnung(LK und KFS);', error);
  }
}

async function Loadstadtzuordnung() {
  try {
    const response = await fetch ('https://raw.githubusercontent.com/MrGreenscreenWFW/LSS-Scripte/refs/heads/main/Building_Rename/stadt_zuordnung.json');
    if (!response.ok) {
        throw new Error(`Fehler beim Laden der Zuordnungen (Städte): ${response.statusText}`);
    }
    stadt_zuordnung = await response.json();
    console.log('Landkreis-Zuordnung erfolgreich geladen.');
  } catch (error) {
    console.error('Fehler beim Laden der Zuordnung(Städte);', error);
  }
}

// Map building types to BOS units
const BOSUnitMapping = {
    0: 'FW',   // Feuerwache
    2: 'RD',   // Rettungswache
    6: 'Pol',  // Polizeiwache
    9: 'THW',  // THW-Ortsverband
    18: 'FW',  // Feuerwache (Kleinwache)
    19: 'Pol', // Polizeiwache (Kleinwache)
    20: 'RD'   // Rettungswache (Kleinwache)
};

// CSRF-Token aus dem Meta-Tag abrufen
const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

/**
 * Verwendet eine Geocoding-API, um Standortnamen und Landkreis oder Stadt aus den Koordinaten zu ermitteln.
 * Falls kein Landkreis gefunden wird, vergleicht es die Stadt mit der Liste der kreisfreien Städte.
 * Zusätzliche Felder werden als Fallback geprüft.
 * @return Objekt mit { location, districtAbbreviation }
 */
async function GetLocationAndDistrictFromCoordinates(lat, lon) {
  try {
    // Geocoding-API verwenden
    console.log(`Verwende Geocoding-API für Koordinaten: ${lat}, ${lon}`);
    const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`);
    const data = await response.json();

    // Standortname ermitteln (city, town oder village)
    let location = data.address.city || data.address.town || data.address.village || "Unbekannter Standort";
    let locationWords = location.split(" ");
    if (locationWords[0] === "Bad" && locationWords.length > 1) {
      location = locationWords.slice(0, 2).join(" ");
    } else if (locationWords[0] === "St." && locationWords.length > 1) {
      location = locationWords.slice(0, 2).join(" ");
    } else {
      location = locationWords[0];
    }

    // Prüfen, ob die Stadt in der Stadtzuordnung vorhanden ist
    if (stadt_zuordnung[location]) {
      console.log(`Stadtzuordnung gefunden für: ${location}`);
      const { districtAbbreviation } = stadt_zuordnung[location];
      return { location, districtAbbreviation };
    }

    // Primäre Abfrage für Landkreis oder Stadt
    console.log(`Keine Stadtzuordnung gefunden. Starte primäre Abfrage für Koordinaten: ${lat}, ${lon}`);
    let district = data.address.county || data.address.city || data.address.state_district || data.address.municipality;
    let districtAbbreviation = districtAbbreviations[district];

    // Fallback: Stadt mit kreisfreien Städten abgleichen, falls keine Zuordnung gefunden wird
    if (!districtAbbreviation && data.address.city) {
      districtAbbreviation = districtAbbreviations[`Stadt ${data.address.city}`];
    }

    // Weitere Fallbacks, falls kein direkter Landkreis oder Stadt gefunden wurde
    if (!districtAbbreviation) {
      district = data.address.town || data.address.suburb || data.address.neighbourhood || "Unbekannter Bezirk";
      districtAbbreviation = districtAbbreviations[district] || "XX"; // Standardwert "XX" wenn keine Abkürzung gefunden wird

      // Loggen für Diagnosezwecke, falls nicht erkannt
      if (districtAbbreviation === "XX") {
        console.warn(`Kein Landkreis oder kreisfreie Stadt erkannt für Koordinaten: ${lat}, ${lon}. Geocoding-Ergebnisse:`, data.address);
      }
    }

    return { location, districtAbbreviation };
  } catch (error) {
    console.error(`Fehler beim Ermitteln von Standort und Landkreis/Stadt für Koordinaten: ${lat}, ${lon}`, error);
    return { location: "Unbekannter Standort", districtAbbreviation: "XX" };
  }
}

/**
 * Ruft die Gebäude-Liste asynchron ab und gibt diese zurück.
 * @return Array
 */
async function GetBuildingsAsync() {
  const response = await $.ajax({
    type: 'GET',
    dataType: 'json',
    url: `https://www.leitstellenspiel.de/api/buildings`
  });
  return response;
}

/**
 * Zeigt einen Fortschrittsindikator in der Konsole an.
 * @param {number} current - Aktueller Fortschritt.
 * @param {number} total - Gesamtanzahl der Elemente.
 */
function showProgress(current, total) {
  const percentage = Math.round((current / total) * 100);
  console.log(`Fortschritt: ${current} von ${total} (${percentage}%)`);
}

// Skript-Initialisierung
(async function() {
  console.log('Starte Umbenennung der Wachen...');

  // Landkreiszuordnung Laden
  await LoadDistrictAbbreviations();

  // Gebäude-Liste abrufen
  var IBuildingList = await GetBuildingsAsync();

  // Gebäude nach Typ filtern (nur Wachen)
  IBuildingList = IBuildingList.filter(Building => FilterBuildingType.includes(Building.building_type));

  // Gefundene Gebäude vor Umbenennung anzeigen
  console.log(`Gefundene Wachen: ${IBuildingList.length}`);
  IBuildingList.forEach(Building => {
    console.log(`Gebäude ID: ${Building.id}, Name: ${Building.caption}, Typ: ${Building.building_type}`);
  });

  let count = 0;

  for (const Building of IBuildingList) {
    count++;
    showProgress(count, IBuildingList.length);

    // Überprüfen, ob die ersten zwei Buchstaben großgeschrieben sind
    if (/^[A-Z]{2}/.test(Building.caption) && !/^XX/.test(Building.caption)) {
      console.log(`Überspringe Gebäude ID ${Building.id}, da der Name bereits mit zwei Großbuchstaben beginnt.`);
      continue;
    }

    // Standort und Landkreis-Abkürzung basierend auf Koordinaten ermitteln
    const { location, districtAbbreviation } = await GetLocationAndDistrictFromCoordinates(Building.latitude, Building.longitude);
    const BOS = BOSUnitMapping[Building.building_type] || 'BOS'; // BOS-Einheit basierend auf dem Gebäudetyp
    console.log(`Geocodierter Standort für Gebäude ID ${Building.id}: ${location}, Landkreis-Kürzel: ${districtAbbreviation}, BOS: ${BOS}`);

    // Neuen Gebäudenamen erstellen
    var NewCaptionScheme = NewBuildingCaption.replace('{DistrictAbbreviation}', districtAbbreviation).replace('{BOS}', BOS).replace('{Location}', location);

    if (Building.caption === NewCaptionScheme) continue;

    console.log(`Umbenennung wird versucht. Alter Name: ${Building.caption} / Neuer Name: ${NewCaptionScheme}`);

    try {
      // Formulardaten vorbereiten
      var formData = new FormData();
      formData.append('utf8', '✓');
      formData.append('_method', 'put');
      formData.append('authenticity_token', csrfToken);
      formData.append('building[name]', NewCaptionScheme);

      // Anfrage mit form-data senden
      const response = await $.ajax({
        type: 'POST',
        url: `https://www.leitstellenspiel.de/buildings/${Building.id}`,
        data: formData,
        processData: false,
        contentType: false,
      });

      console.log(`Gebäude ID ${Building.id} erfolgreich aktualisiert.`);
      await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 200) + 100));
    } catch (error) {
      console.error(`Fehler beim Aktualisieren der Gebäude ID: ${Building.id}`, error);
    }
  }

  console.log('Umbenennung der Wachen abgeschlossen!');
})();
