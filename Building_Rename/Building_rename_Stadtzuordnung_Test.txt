// EINSTELLUNGEN; Platzhalter: {DistrictAbbreviation}, {BOS}, {Location}
var NewBuildingCaption = '{DistrictAbbreviation} / {BOS} / {Location}';
var FilterBuildingType = [0, 2, 6, 9, 18, 19, 20]; // Nur Wachen-Typen

// Zuordnungstabelle für Landkreise und kreisfreie Städte
let districtAbbreviations = {};
let cityMapping = {};

/**
 * Laden der Landkreiszuordnung von Extern
**/
async function LoadDistrictAbbreviations() {
  try {
    const response = await fetch ('https://raw.githubusercontent.com/MrGreenscreenWFW/LSS-Scripte/refs/heads/main/Building_Rename/landkreis_zuordnung.json');
    if (!response.ok) {
        throw new Error(`Fehler beim Laden der Zuordnungen: ${response.statusText}`);
    }
    districtAbbreviations = await response.json();
    console.log('Landkreis-Zuordnung erfolgreich geladen.');
  } catch (error) {
    console.error('Fehler beim Laden der Zuordnung;', error);
  }
}

/**
 * Laden der Stadtzuordnung von Extern
**/
async function LoadCityMapping() {
  try {
    const response = await fetch('https://raw.githubusercontent.com/MrGreenscreenWFW/LSS-Scripte/refs/heads/main/Building_Rename/stadt_zuordnung.json');
    if (!response.ok) {
        throw new Error(`Fehler beim Laden der Stadtzuordnungen: ${response.statusText}`);
    }
    cityMapping = await response.json();
    console.log('Stadt-Zuordnung erfolgreich geladen.');
  } catch (error) {
    console.error('Fehler beim Laden der Stadtzuordnung:', error);
  }
}

// Map building types to BOS units
const BOSUnitMapping = {
    0: 'FW',   // Feuerwache
    2: 'RD',   // Rettungswache
    6: 'Pol',  // Polizeiwache
    9: 'THW',  // THW-Ortsverband
    18: 'FW',  // Feuerwache (Kleinwache)
    19: 'Pol', // Polizeiwache (Kleinwache)
    20: 'RD'   // Rettungswache (Kleinwache)
};

/**
 * Verwendet eine Geocoding-API, um Standortnamen und Landkreis oder Stadt aus den Koordinaten zu ermitteln.
 * Falls kein Landkreis gefunden wird, vergleicht es die Stadt mit der Liste der Zuordnungen.
 * @return Objekt mit { location, districtAbbreviation }
 */
async function GetLocationAndDistrictFromCoordinates(lat, lon) {
  try {
    const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`);
    const data = await response.json();

    let location = data.address.city || data.address.town || data.address.village || "Unbekannter Standort";

    // Stadtzuordnung überprüfen
    let districtAbbreviation = cityMapping[location];

    // Wenn keine Stadtzuordnung gefunden wurde, auf Landkreiszuordnung zurückfallen
    if (!districtAbbreviation) {
      console.warn(`Stadt nicht in der Zuordnung gefunden: ${location}`);
      let district = data.address.county || "Unbekannter Bezirk";
      districtAbbreviation = districtAbbreviations[district] || "XX";
    }

    return { location, districtAbbreviation };
  } catch (error) {
    console.error(`Fehler beim Ermitteln von Standort und Landkreis/Stadt für Koordinaten: ${lat}, ${lon}`, error);
    return { location: "Unbekannter Standort", districtAbbreviation: "XX" };
  }
}

// Skript-Initialisierung
(async function() {
  console.log('Starte Umbenennung der Wachen...');

  // Landkreiszuordnung und Stadtzuordnung laden
  await LoadDistrictAbbreviations();
  await LoadCityMapping();

  // Gebäude-Liste abrufen
  var IBuildingList = await GetBuildingsAsync();

  // Gebäude nach Typ filtern (nur Wachen)
  IBuildingList = IBuildingList.filter(Building => FilterBuildingType.includes(Building.building_type));

  console.log(`Gefundene Wachen: ${IBuildingList.length}`);

  let count = 0;

  for (const Building of IBuildingList) {
    count++;
    showProgress(count, IBuildingList.length);

    if (/^[A-Z]{2}/.test(Building.caption) && !/^XX/.test(Building.caption)) {
      console.log(`Überspringe Gebäude ID ${Building.id}, da der Name bereits mit zwei Großbuchstaben beginnt.`);
      continue;
    }

    const { location, districtAbbreviation } = await GetLocationAndDistrictFromCoordinates(Building.latitude, Building.longitude);
    const BOS = BOSUnitMapping[Building.building_type] || 'BOS';

    var NewCaptionScheme = NewBuildingCaption.replace('{DistrictAbbreviation}', districtAbbreviation).replace('{BOS}', BOS).replace('{Location}', location);

    if (Building.caption === NewCaptionScheme) continue;

    try {
      var formData = new FormData();
      formData.append('utf8', '✓');
      formData.append('_method', 'put');
      formData.append('authenticity_token', csrfToken);
      formData.append('building[name]', NewCaptionScheme);

      await $.ajax({
        type: 'POST',
        url: `https://www.leitstellenspiel.de/buildings/${Building.id}`,
        data: formData,
        processData: false,
        contentType: false,
      });

      console.log(`Gebäude ID ${Building.id} erfolgreich aktualisiert.`);
      await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 200) + 100));
    } catch (error) {
      console.error(`Fehler beim Aktualisieren der Gebäude ID: ${Building.id}`, error);
    }
  }

  console.log('Umbenennung der Wachen abgeschlossen!');
})();